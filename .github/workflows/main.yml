name: Build and Deploy App Into AWS
'on':
  pull_request:
    branches:
      - main
    types:
      - opened
      - edited
    paths:
      - backend/src/*.ts
      - backend/src/*.tsx
      - backend/src/*/*.ts
      - backend/src/*/*.tsx
      - frontend/src/*.ts
      - frontend/src/*.tsx
      - frontend/src/*/*.ts
      - frontend/src/*/*.tsx
      - develop_pipelines.yml
      - Dockerfile
env:
  dockerfilePath: '**/Dockerfile'
  vmImageName: ubuntu-latest
  tag: '${{github.run_id}}'
  AWS_S3_BUCKET: jgrants-dev-bucket-jgrants-447776907223
  AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
  AWS_REGION: ap-northeast-1
  SOURCE_DIR: frontend/jGrant
  REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
  REPOSITORY: jgrantsv3-dev-ecr-repo-01
  IMAGE_TAG: '${{ github.sha }}'
jobs:
  linting_formatting:
    name: LintingFormatting
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Get changed files
        run: >
          PR_NUMBER=${{ github.event.pull_request.number }}

          REPO="${{ github.repository }}"

          FILES_URL="https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files"

          HEADERS="Authorization: token ${{ secrets.GITHUB_TOKEN }}"

          changedFiles=()

          for file in $(curl -s -H "${HEADERS}" $FILES_URL | jq -r
          '.[].filename'); do
            if [[ $file == *.ts || $file == *.tsx ]]; then
              changedFiles+=("$file")
            fi
          done

          echo "CHANGED_FILES=${changedFiles[*]}" >> $GITHUB_ENV

          isCurrentBackend=false

          isCurrentFrontend=false

          isNpmInstalledForBackend=false

          isNpmInstalledForFrontend=false

          for file in ${changedFiles[@]}; do
            echo "Processing file: $file"      
            if [[ "$file" == *"/backend/"* ]]; then
              if [[ "$isCurrentBackend" == false]]; then
                cd $GITHUB_WORKSPACE/backend
                isCurrentBackend=true
                isCurrentFrontend=false
              fi

              if [[ "$isNpmInstalledForBackend" == false  ]]; then
                echo "Install package for backend with npm install" 
                npm install
                isNpmInstalledForBackend=true                    
              fi

              lintError=$(npm run lint:pipelinecheck "$file" --silent | grep -E 'error|warning')

              if [ -n "$lintError" ]; then
                echo "lint:check"
                npm run lint:pipelinecheck "$file"
                exit 1
              fi

              npm run format:pipelinecheck "$file"

              formatError=$?

              if [ $formatError -ne 0 ]; then
                exit $formatError
              fi
            elif [[ "$file" == *"/frontend/"* ]]; then
              if [[ "$isCurrentFrontend" == false  ]]; then
                cd $GITHUB_WORKSPACE/frontend
                isCurrentBackend=false  
                isCurrentFrontend=true                  
              fi

              echo "frontend:$file"

              if [[ "$isNpmInstalledForFrontend" == false ]]; then 
                echo "Install package for frontend with npm install"
                npm install
                isNpmInstalledForFrontend=true
              fi

              lintError=$(npm run lint:pipelinecheck "$file" --silent | grep -E 'error|warning')

              if [ -n "$lintError" ]; then
                echo "lint:check"
                npm run lint:pipelinecheck "$file"
                exit 1
              fi

              npm run format:pipelinecheck "$file"
              formatError=$?
              echo "formaterr:$formatError"
              if [ $formatError -ne 0  ]; then
                echo "format:check"
                exit $formatError
              fi 
            fi
          done
